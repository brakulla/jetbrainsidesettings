<templateSet group="JavaScript">
  <template name="defModelFile" value="const mongoose = require('mongoose');&#10;const Schema = mongoose.Schema;&#10;&#10;const Joi = require('joi');&#10;&#10;const modelSchema = new Schema({&#10;    &#10;});&#10;&#10;modelSchema.methods.dummyMethod = function () {&#10;    return jwt.sign({id: this._id}, config.get('jwtPrivateKey'));&#10;};&#10;&#10;modelSchema.statics.dummyStaticFunction = function (model) {&#10;    const schema = {&#10;        &#10;    };&#10;    return Joi.validate(user, schema);&#10;};&#10;&#10;const Model = mongoose.model('Model', modelSchema);&#10;// Model.esSynchronize()&#10;//     .then(function () {&#10;//         winston.info('Model model elastic search synchronization is done');&#10;//     });&#10;&#10;module.exports = Model;" shortcut="SPACE" description="Inserts model file template" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="defControllerFile" value="const Model = require('../model/model');&#10;const bcrypt = require('bcrypt');&#10;const winston = require('winston');&#10;const _ = require('lodash');&#10;&#10;function create(modelData, session) {&#10;    return new Promise(async function(resolve, reject) {&#10;        try {&#10;            const { error } = Model.validateInputData(modelData);&#10;            if (error) {&#10;                winston.error('Could not validate model: ' + error.details[0].message);&#10;                return reject({ status: 400, message: error.details[0].message });&#10;            }&#10;&#10;            let model = await Model.findOne({ email: modelData.email }).session(session);&#10;            if (model) {&#10;                winston.error('Model already exists!');&#10;                return reject({ status: 400, message: 'Model already exists!' });&#10;            }&#10;&#10;            model = new Model(modelData);&#10;            model = await model.save({ session: session });&#10;&#10;            resolve(_.omit(model.toObject(), ['__v']));&#10;        } catch (e) {&#10;            winston.error('Could not create model\n' + e);&#10;            console.trace();&#10;            if (e.status &amp;&amp; e.message)&#10;                reject({ status: e.status, message: e.message });&#10;            else reject({ status: 500, message: 'Internal server error' });&#10;        }&#10;    });&#10;}&#10;&#10;function readAll(page, count, session) {&#10;    return new Promise(async function(resolve, reject) {&#10;        try {&#10;            let models = await Model.find().skip((page-1)*count).limit(count).select(['-password', '-__v'])&#10;                .session(session);&#10;            resolve(models);&#10;        } catch (e) {&#10;            winston.error('Could not read models\n' + e);&#10;            if (e.status &amp;&amp; e.message)&#10;                reject({ status: e.status, message: e.message });&#10;            else reject({ status: 500, message: 'Internal server error' });&#10;        }&#10;    });&#10;}&#10;&#10;function readById(id, session) {&#10;    return new Promise(async function(resolve, reject) {&#10;        try {&#10;            let model = await User.findById(id).session(session);&#10;            if (!model)&#10;                reject({ status: 404, message: 'Model not found' });&#10;            else resolve(_.omit(model.toObject(), ['__v']));&#10;        } catch (e) {&#10;            winston.error('Could not read model with id: ' + userId + '\n' + e);&#10;            if (e.status &amp;&amp; e.message)&#10;                reject({ status: e.status, message: e.message });&#10;            else reject({ status: 500, message: 'Internal server error' });&#10;        }&#10;    });&#10;}&#10;&#10;function readByEmail(email, session) {&#10;    return new Promise(async function(resolve, reject) {&#10;        try {&#10;            let model = await Model.findOne({ email: email }).session(session);&#10;            if (!model)&#10;                reject({ status: 404, message: 'Model not found' });&#10;            else resolve(_.omit(model.toObject(), ['__v']));&#10;        } catch (e) {&#10;            winston.error('Could not read model\n' + e);&#10;            if (e.status &amp;&amp; e.message)&#10;                reject({ status: e.status, message: e.message });&#10;            else reject({ status: 500, message: 'Internal server error' });&#10;        }&#10;    });&#10;}&#10;&#10;function updateById(id, madelData, session) {&#10;    return new Promise(async function(resolve, reject) {&#10;        try {&#10;            const { error } = await Model.validateInputData(modelData);&#10;            if (error) return reject({status: 400, message: error.details[0].message});&#10;&#10;            let model = await Model.findByIdAndUpdate(id, modelData, { new: true }).session(session);&#10;            if (!model) return reject({ status: 404, message: 'Model not found!' });&#10;&#10;            resolve(_.omit(model.toObject(), ['__v']));&#10;        } catch (e) {&#10;            winston.error('Could not update model with id: ' + id + '\n' + e);&#10;            if (e.status &amp;&amp; e.message)&#10;                reject({ status: e.status, message: e.message });&#10;            else reject({ status: 500, message: 'Internal server error' });&#10;        }&#10;    });&#10;}&#10;&#10;function deleteById(id, session) {&#10;    return new Promise(async function(resolve, reject) {&#10;        try {&#10;            let model = await Model.findByIdAndDelete(id).session(session);&#10;            if (!model) {&#10;                winston.error('Model not found ' + id);&#10;                return reject({ status: 404, message: 'Model not found!' });&#10;            }&#10;            resolve(model);&#10;        } catch (e) {&#10;            winston.error('Could not delete user with id: ' + userId + '\n' + e);&#10;            if (e.status &amp;&amp; e.message)&#10;                reject({ status: e.status, message: e.message });&#10;            else reject({ status: 500, message: 'Internal server error' });&#10;        }&#10;    });&#10;}&#10;&#10;module.exports.create = create;&#10;module.exports.readAll = readAll;&#10;module.exports.readById = readById;&#10;module.exports.readByEmail = readByEmail;&#10;module.exports.updateById = updateById;&#10;module.exports.deleteById = deleteById;" description="Inserts controller file template" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="defControllerFunction" value="function dummyName(data, session) {&#10;    return new Promise(async function(resolve, reject) {&#10;        try {&#10;            &#10;        } catch (e) {&#10;            winston.error('Could not something to data\n' + e);&#10;            if (e.status &amp;&amp; e.message)&#10;                reject({ status: e.status, message: e.message });&#10;            else reject({ status: 500, message: 'Internal server error' });&#10;        }&#10;    });&#10;}" description="Inserts controller function template" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="defRouteFile" value="const express = require('express');&#10;const router = express.Router();&#10;const Model = require('../controllers/modelController');&#10;const mongoose = require('mongoose');&#10;&#10;router.get('/', async function(req, res) {&#10;    let page = 1;&#10;    let count = 10;&#10;    if (req.query) {&#10;        if (req.query.page) page = req.query.page.toNumber();&#10;        if (req.query.count) count = req.query.count.toNumber();&#10;    }&#10;&#10;    let session = await mongoose.startSession();&#10;    await session.startTransaction();&#10;    try {&#10;        let models = await Model.readAll(page, count, session);&#10;        await session.commitTransaction();&#10;        session.endSession();&#10;        res.send(models);&#10;    } catch (e) {&#10;        await session.abortTransaction();&#10;        session.endSession();&#10;        res.status(e.status).send(e.message);&#10;    }&#10;});&#10;&#10;router.get('/:id', async function(req, res) {&#10;    let session = await mongoose.startSession();&#10;    await session.startTransaction();&#10;    try {&#10;        let model = await Model.readById(req.params.id, session);&#10;        await session.commitTransaction();&#10;        session.endSession();&#10;        res.send(model);&#10;    } catch (e) {&#10;        await session.abortTransaction();&#10;        session.endSession();&#10;        res.status(e.status).send(e.message);&#10;    }&#10;});&#10;&#10;router.post('/', async function(req, res) {&#10;    let session = await mongoose.startSession();&#10;    await session.startTransaction();&#10;    try {&#10;        let model = await Model.create(req.body, session);&#10;        await session.commitTransaction();&#10;        session.endSession();&#10;        res.send(model);&#10;    } catch (e) {&#10;        await session.abortTransaction();&#10;        session.endSession();&#10;        res.status(e.status).send(e.message);&#10;    }&#10;});&#10;&#10;router.put('/:id', async function(req, res) {&#10;    let session = await mongoose.startSession();&#10;    await session.startTransaction();&#10;    try {&#10;        let model = await Model.updateById(req.params.id, req.body, session);&#10;        await session.commitTransaction();&#10;        session.endSession();&#10;        res.send(model);&#10;    } catch (e) {&#10;        await session.abortTransaction();&#10;        session.endSession();&#10;        res.status(e.status).send(e.message);&#10;    }&#10;});&#10;&#10;router.delete('/:id', async function(req, res) {&#10;    let session = await mongoose.startSession();&#10;    await session.startTransaction();&#10;    try {&#10;        let model = await Model.deleteById(req.params.id, session);&#10;        await session.commitTransaction();&#10;        session.endSession();&#10;        res.send(model);&#10;    } catch (e) {&#10;        await session.abortTransaction();&#10;        session.endSession();&#10;        res.status(e.status).send(e.message);&#10;    }&#10;});&#10;&#10;module.exports = router;" shortcut="SPACE" description="Inserts route file template" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="defRouteFunction" value="router.get('/', async function(req, res) {&#10;    let page = 1;&#10;    let count = 10;&#10;    if (req.query) {&#10;        if (req.query.page) page = req.query.page.toNumber();&#10;        if (req.query.count) count = req.query.count.toNumber();&#10;    }&#10;&#10;    let session = await mongoose.startSession();&#10;    await session.startTransaction();&#10;    try {&#10;        let models = await Model.readAll(page, count, session);&#10;        await session.commitTransaction();&#10;        session.endSession();&#10;        res.send(models);&#10;    } catch (e) {&#10;        await session.abortTransaction();&#10;        session.endSession();&#10;        res.status(e.status).send(e.message);&#10;    }&#10;});" shortcut="SPACE" description="Inserts route function template" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>